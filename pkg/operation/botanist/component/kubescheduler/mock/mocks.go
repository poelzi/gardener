// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/operation/botanist/component/kubescheduler (interfaces: KubeScheduler)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kubescheduler "github.com/gardener/gardener/pkg/operation/botanist/component/kubescheduler"
	gomock "github.com/golang/mock/gomock"
)

// MockKubeScheduler is a mock of KubeScheduler interface.
type MockKubeScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockKubeSchedulerMockRecorder
}

// MockKubeSchedulerMockRecorder is the mock recorder for MockKubeScheduler.
type MockKubeSchedulerMockRecorder struct {
	mock *MockKubeScheduler
}

// NewMockKubeScheduler creates a new mock instance.
func NewMockKubeScheduler(ctrl *gomock.Controller) *MockKubeScheduler {
	mock := &MockKubeScheduler{ctrl: ctrl}
	mock.recorder = &MockKubeSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeScheduler) EXPECT() *MockKubeSchedulerMockRecorder {
	return m.recorder
}

// AlertingRules mocks base method.
func (m *MockKubeScheduler) AlertingRules() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlertingRules")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlertingRules indicates an expected call of AlertingRules.
func (mr *MockKubeSchedulerMockRecorder) AlertingRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertingRules", reflect.TypeOf((*MockKubeScheduler)(nil).AlertingRules))
}

// Deploy mocks base method.
func (m *MockKubeScheduler) Deploy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockKubeSchedulerMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockKubeScheduler)(nil).Deploy), arg0)
}

// Destroy mocks base method.
func (m *MockKubeScheduler) Destroy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockKubeSchedulerMockRecorder) Destroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockKubeScheduler)(nil).Destroy), arg0)
}

// ScrapeConfigs mocks base method.
func (m *MockKubeScheduler) ScrapeConfigs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapeConfigs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapeConfigs indicates an expected call of ScrapeConfigs.
func (mr *MockKubeSchedulerMockRecorder) ScrapeConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeConfigs", reflect.TypeOf((*MockKubeScheduler)(nil).ScrapeConfigs))
}

// SetSecrets mocks base method.
func (m *MockKubeScheduler) SetSecrets(arg0 kubescheduler.Secrets) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSecrets", arg0)
}

// SetSecrets indicates an expected call of SetSecrets.
func (mr *MockKubeSchedulerMockRecorder) SetSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecrets", reflect.TypeOf((*MockKubeScheduler)(nil).SetSecrets), arg0)
}

// Wait mocks base method.
func (m *MockKubeScheduler) Wait(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockKubeSchedulerMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockKubeScheduler)(nil).Wait), arg0)
}

// WaitCleanup mocks base method.
func (m *MockKubeScheduler) WaitCleanup(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCleanup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitCleanup indicates an expected call of WaitCleanup.
func (mr *MockKubeSchedulerMockRecorder) WaitCleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCleanup", reflect.TypeOf((*MockKubeScheduler)(nil).WaitCleanup), arg0)
}
