// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/operation/botanist/component/vpnseedserver (interfaces: VPNSeedServer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	vpnseedserver "github.com/gardener/gardener/pkg/operation/botanist/component/vpnseedserver"
	gomock "github.com/golang/mock/gomock"
)

// MockVPNSeedServer is a mock of VPNSeedServer interface.
type MockVPNSeedServer struct {
	ctrl     *gomock.Controller
	recorder *MockVPNSeedServerMockRecorder
}

// MockVPNSeedServerMockRecorder is the mock recorder for MockVPNSeedServer.
type MockVPNSeedServerMockRecorder struct {
	mock *MockVPNSeedServer
}

// NewMockVPNSeedServer creates a new mock instance.
func NewMockVPNSeedServer(ctrl *gomock.Controller) *MockVPNSeedServer {
	mock := &MockVPNSeedServer{ctrl: ctrl}
	mock.recorder = &MockVPNSeedServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPNSeedServer) EXPECT() *MockVPNSeedServerMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockVPNSeedServer) Deploy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockVPNSeedServerMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockVPNSeedServer)(nil).Deploy), arg0)
}

// Destroy mocks base method.
func (m *MockVPNSeedServer) Destroy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockVPNSeedServerMockRecorder) Destroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockVPNSeedServer)(nil).Destroy), arg0)
}

// SetSecrets mocks base method.
func (m *MockVPNSeedServer) SetSecrets(arg0 vpnseedserver.Secrets) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSecrets", arg0)
}

// SetSecrets indicates an expected call of SetSecrets.
func (mr *MockVPNSeedServerMockRecorder) SetSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecrets", reflect.TypeOf((*MockVPNSeedServer)(nil).SetSecrets), arg0)
}

// Wait mocks base method.
func (m *MockVPNSeedServer) Wait(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockVPNSeedServerMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockVPNSeedServer)(nil).Wait), arg0)
}

// WaitCleanup mocks base method.
func (m *MockVPNSeedServer) WaitCleanup(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCleanup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitCleanup indicates an expected call of WaitCleanup.
func (mr *MockVPNSeedServerMockRecorder) WaitCleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCleanup", reflect.TypeOf((*MockVPNSeedServer)(nil).WaitCleanup), arg0)
}
