/*
Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gardener/gardener/pkg/apis/seedmanagement/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagedSeedLister helps list ManagedSeeds.
// All objects returned here must be treated as read-only.
type ManagedSeedLister interface {
	// List lists all ManagedSeeds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedSeed, err error)
	// ManagedSeeds returns an object that can list and get ManagedSeeds.
	ManagedSeeds(namespace string) ManagedSeedNamespaceLister
	ManagedSeedListerExpansion
}

// managedSeedLister implements the ManagedSeedLister interface.
type managedSeedLister struct {
	indexer cache.Indexer
}

// NewManagedSeedLister returns a new ManagedSeedLister.
func NewManagedSeedLister(indexer cache.Indexer) ManagedSeedLister {
	return &managedSeedLister{indexer: indexer}
}

// List lists all ManagedSeeds in the indexer.
func (s *managedSeedLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedSeed, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedSeed))
	})
	return ret, err
}

// ManagedSeeds returns an object that can list and get ManagedSeeds.
func (s *managedSeedLister) ManagedSeeds(namespace string) ManagedSeedNamespaceLister {
	return managedSeedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedSeedNamespaceLister helps list and get ManagedSeeds.
// All objects returned here must be treated as read-only.
type ManagedSeedNamespaceLister interface {
	// List lists all ManagedSeeds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedSeed, err error)
	// Get retrieves the ManagedSeed from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedSeed, error)
	ManagedSeedNamespaceListerExpansion
}

// managedSeedNamespaceLister implements the ManagedSeedNamespaceLister
// interface.
type managedSeedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedSeeds in the indexer for a given namespace.
func (s managedSeedNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedSeed, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedSeed))
	})
	return ret, err
}

// Get retrieves the ManagedSeed from the indexer for a given namespace and name.
func (s managedSeedNamespaceLister) Get(name string) (*v1alpha1.ManagedSeed, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedseed"), name)
	}
	return obj.(*v1alpha1.ManagedSeed), nil
}
