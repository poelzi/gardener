// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/utils/kubernetes (interfaces: ControllerPredicateFactory,Enqueuer)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockControllerPredicateFactory is a mock of ControllerPredicateFactory interface.
type MockControllerPredicateFactory struct {
	ctrl     *gomock.Controller
	recorder *MockControllerPredicateFactoryMockRecorder
}

// MockControllerPredicateFactoryMockRecorder is the mock recorder for MockControllerPredicateFactory.
type MockControllerPredicateFactoryMockRecorder struct {
	mock *MockControllerPredicateFactory
}

// NewMockControllerPredicateFactory creates a new mock instance.
func NewMockControllerPredicateFactory(ctrl *gomock.Controller) *MockControllerPredicateFactory {
	mock := &MockControllerPredicateFactory{ctrl: ctrl}
	mock.recorder = &MockControllerPredicateFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerPredicateFactory) EXPECT() *MockControllerPredicateFactoryMockRecorder {
	return m.recorder
}

// NewControllerPredicate mocks base method.
func (m *MockControllerPredicateFactory) NewControllerPredicate(arg0 client.Object) predicate.Predicate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewControllerPredicate", arg0)
	ret0, _ := ret[0].(predicate.Predicate)
	return ret0
}

// NewControllerPredicate indicates an expected call of NewControllerPredicate.
func (mr *MockControllerPredicateFactoryMockRecorder) NewControllerPredicate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewControllerPredicate", reflect.TypeOf((*MockControllerPredicateFactory)(nil).NewControllerPredicate), arg0)
}

// MockEnqueuer is a mock of Enqueuer interface.
type MockEnqueuer struct {
	ctrl     *gomock.Controller
	recorder *MockEnqueuerMockRecorder
}

// MockEnqueuerMockRecorder is the mock recorder for MockEnqueuer.
type MockEnqueuerMockRecorder struct {
	mock *MockEnqueuer
}

// NewMockEnqueuer creates a new mock instance.
func NewMockEnqueuer(ctrl *gomock.Controller) *MockEnqueuer {
	mock := &MockEnqueuer{ctrl: ctrl}
	mock.recorder = &MockEnqueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnqueuer) EXPECT() *MockEnqueuerMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockEnqueuer) Enqueue(arg0 client.Object) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enqueue", arg0)
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockEnqueuerMockRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockEnqueuer)(nil).Enqueue), arg0)
}
