// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/util/workqueue (interfaces: RateLimitingInterface)

// Package workqueue is a generated GoMock package.
package workqueue

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRateLimitingInterface is a mock of RateLimitingInterface interface.
type MockRateLimitingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitingInterfaceMockRecorder
}

// MockRateLimitingInterfaceMockRecorder is the mock recorder for MockRateLimitingInterface.
type MockRateLimitingInterfaceMockRecorder struct {
	mock *MockRateLimitingInterface
}

// NewMockRateLimitingInterface creates a new mock instance.
func NewMockRateLimitingInterface(ctrl *gomock.Controller) *MockRateLimitingInterface {
	mock := &MockRateLimitingInterface{ctrl: ctrl}
	mock.recorder = &MockRateLimitingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitingInterface) EXPECT() *MockRateLimitingInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRateLimitingInterface) Add(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockRateLimitingInterfaceMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRateLimitingInterface)(nil).Add), arg0)
}

// AddAfter mocks base method.
func (m *MockRateLimitingInterface) AddAfter(arg0 interface{}, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAfter", arg0, arg1)
}

// AddAfter indicates an expected call of AddAfter.
func (mr *MockRateLimitingInterfaceMockRecorder) AddAfter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAfter", reflect.TypeOf((*MockRateLimitingInterface)(nil).AddAfter), arg0, arg1)
}

// AddRateLimited mocks base method.
func (m *MockRateLimitingInterface) AddRateLimited(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRateLimited", arg0)
}

// AddRateLimited indicates an expected call of AddRateLimited.
func (mr *MockRateLimitingInterfaceMockRecorder) AddRateLimited(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRateLimited", reflect.TypeOf((*MockRateLimitingInterface)(nil).AddRateLimited), arg0)
}

// Done mocks base method.
func (m *MockRateLimitingInterface) Done(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done", arg0)
}

// Done indicates an expected call of Done.
func (mr *MockRateLimitingInterfaceMockRecorder) Done(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockRateLimitingInterface)(nil).Done), arg0)
}

// Forget mocks base method.
func (m *MockRateLimitingInterface) Forget(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forget", arg0)
}

// Forget indicates an expected call of Forget.
func (mr *MockRateLimitingInterfaceMockRecorder) Forget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forget", reflect.TypeOf((*MockRateLimitingInterface)(nil).Forget), arg0)
}

// Get mocks base method.
func (m *MockRateLimitingInterface) Get() (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRateLimitingInterfaceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRateLimitingInterface)(nil).Get))
}

// Len mocks base method.
func (m *MockRateLimitingInterface) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockRateLimitingInterfaceMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockRateLimitingInterface)(nil).Len))
}

// NumRequeues mocks base method.
func (m *MockRateLimitingInterface) NumRequeues(arg0 interface{}) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumRequeues", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// NumRequeues indicates an expected call of NumRequeues.
func (mr *MockRateLimitingInterfaceMockRecorder) NumRequeues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumRequeues", reflect.TypeOf((*MockRateLimitingInterface)(nil).NumRequeues), arg0)
}

// ShutDown mocks base method.
func (m *MockRateLimitingInterface) ShutDown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutDown")
}

// ShutDown indicates an expected call of ShutDown.
func (mr *MockRateLimitingInterfaceMockRecorder) ShutDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDown", reflect.TypeOf((*MockRateLimitingInterface)(nil).ShutDown))
}

// ShuttingDown mocks base method.
func (m *MockRateLimitingInterface) ShuttingDown() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShuttingDown")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShuttingDown indicates an expected call of ShuttingDown.
func (mr *MockRateLimitingInterfaceMockRecorder) ShuttingDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShuttingDown", reflect.TypeOf((*MockRateLimitingInterface)(nil).ShuttingDown))
}
